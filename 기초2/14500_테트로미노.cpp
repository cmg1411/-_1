#include<iostream>
#include<vector>
using namespace std;

int block[19][3][2]={
    {{1,0},{2,0},{3,0}}, // ㅡ
    {{0,1},{0,2},{0,3}}, // ㅣ
    {{1,0},{0,1},{1,1}}, // ㅁ
    {{1,0},{2,0},{2,1}}, // ㄴ
    {{1,0},{0,1},{0,2}},
    {{0,1},{1,1},{2,1}}, // ㄱ
    {{1,0},{1,-1},{1,-2}},
    {{1,0},{2,0},{2,-1}}, // ㄱ 좌우대칭 시계방향 네개
    {{1,0},{1,1},{1,2}},
    {{0,1},{1,0},{2,0}},
    {{0,1},{0,2},{1,2}},
    {{1,0},{1,1},{2,1}}, // ㄴㄱ 합쳐진거
    {{1,0},{0,1},{1,-1}},
    {{1,0},{1,-1},{2,-1}}, // ㄴㄱ 합쳐진거 좌우대칭
    {{0,1},{1,1},{1,2}},
    {{1,0},{1,-1},{1,1}}, // ㅗ 시계방향 네개
    {{1,0},{2,0},{1,1}},
    {{0,1},{0,2},{1,1}},
    {{1,0},{2,0},{1,-1}}
};

int main(){
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);

    int n, m;
    cin >> n >> m;

    vector<vector<int>> v(n,vector<int>(m,0));

    for(int i=0 ; i<n ; i++){
        for(int j=0 ; j<m ; j++){
            cin >> v[i][j];
        }
    }

    int max = -987654321;
    for(int i=0 ; i<n ; i++){ // 각 x,
        for(int j=0 ; j<m ; j++){ // y에 대해서 모든 경우의 수에서
            for(int k=0 ; k<19 ; k++){ // 19가지의 도형을 모두 검사.
                int sum=v[i][j]; // 위 block배열에서 (0,0)은 초기화 하지 않은 이유 -> 여기서 그 위치를 기본값으로 줄 거임
                bool flag = true;
                for(int l=0 ; l<3 ; l++){
                    int x = i + block[k][l][0];
                    int y = j + block[k][l][1];
                    if(x>=0 && y>=0 && x<n && y<m){ // 블럭의 부분이 종이를 벗어나지 않을 경우만 갱신
                        sum += v[x][y];
                    }else{
                        flag = false;
                    }
                }
                if(max<sum && flag) max = sum;
            }
        }
    }

    cout << max;
    return 0;
}